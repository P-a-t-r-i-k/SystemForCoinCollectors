@page "/my-collection/{AlbumId:int}/{Year}"

@using SystemForCoinCollectors.Data
@using SystemForCoinCollectors.Services

@attribute [StreamRendering(true)]
@rendermode @(new InteractiveServerRenderMode(false))

@inject ICoinService CoinService
@inject IAlbumCoinService AlbumCoinService

<PageTitle>My Collection</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (_coins == null)
        {
            <span>Loading...</span>
        }
        else if (_coins.Count == 0)
        {
            <span>No coins were found.</span>
        }
        else
        {
            <div class="container">
                @{
                    _currentCoinIndex = (_currentPage - 1) * (_defaultNumberOfRows * _defaultNumberOfColumns);
                }

                @for (int i = 0; i < _defaultNumberOfRows; i++)
                {
                    string removeString = "wwwroot/";

                    <div class="row">
                        @for (int j = 0; j < _defaultNumberOfColumns; j++)
                        {
                            @if (_currentCoinIndex < _coins.Count)
                            {
                                Coin coin = _coins.ElementAt(_currentCoinIndex);
                                string imgPath = coin.ImagePath;
                                int length = removeString.Length;

                                @if (imgPath.Contains(removeString))
                                {
                                    imgPath = coin.ImagePath.Substring(length - 1);
                                }

                                string coinStatus = "unobtained";
                                bool isInCollection = _coinsInAlbum.Contains(coin);
                                if (isInCollection)
                                {
                                    coinStatus = "obtained";
                                }

                                <div class="col">
                                    <div class="card d-flex flex-column justify-content-center align-items-center">
                                        <a href="/coin-details/@coin.Id">
                                            <img class="coinImage @coinStatus" src=@imgPath>
                                        </a>
                                        <ToggleSwitch Value="isInCollection" CoinId="@coin.Id" OnToggle="OnValueChanged" />
                                    </div>
                                </div>
                            }

                            _currentCoinIndex++;
                        }
                    </div>
                }

                <div class="row">
                    <div class="col prevNext">
                        <button class="btn" disabled="@_previousPageDisabled" @onclick="PreviousPage">←</button>
                        <span>@_currentPage/@_lastPage</span>
                        <button class="btn" disabled="@_nextPageDisabled" @onclick="NextPage">→</button>
                    </div>
                </div>
            </div>
        }
    </Authorized>
    
    <NotAuthorized>
        <NotLoggedIn />
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int AlbumId { get; set; }

    [Parameter]
    public string Year { get; set; }

    private const int _defaultNumberOfRows = 3;
    private const int _defaultNumberOfColumns = 5;
    private int _currentCoinIndex = 0;
    private int _currentPage = 1;
    private int _lastPage = 1;
    private bool _previousPageDisabled = true;
    private bool _nextPageDisabled = true;
    private List<Coin>.Enumerator _coinEnumerator;
    List<Coin>? _coins = null;
    List<Coin>? _coinsInAlbum = null;

    protected override async Task OnInitializedAsync()
    {
        _coins = await CoinService.GetCoinsByYear(Year);
        _coins = _coins.OrderBy(coin => coin.Country).ThenBy(coin => coin.Feature).ToList();
        _coinEnumerator = _coins.GetEnumerator();
        _lastPage = _coins.Count / (_defaultNumberOfColumns * _defaultNumberOfRows) + 1;

        _coinsInAlbum = await AlbumCoinService.GetCoinIdsInAlbum(AlbumId);

        if (_lastPage > _currentPage)
        {
            _nextPageDisabled = false;
        }
    }

    private void PreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            if (_currentPage == 1)
            {
                _previousPageDisabled = true;
            }
        }

        _nextPageDisabled = false;
    }

    public void NextPage()
    {
        if (_currentPage < _lastPage)
        {
            _currentPage++;
            if (_currentPage == _lastPage)
            {
                _nextPageDisabled = true;
            }
        }

        _previousPageDisabled = false;
    }

    public async void OnValueChanged(int coinId)
    {
        /*
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        */

        Coin? coin = await CoinService.GetById(coinId);
        if (coin == null || _coinsInAlbum == null)
        {
            return;
        }

        if (_coinsInAlbum.Contains(coin))
        {
            _coinsInAlbum.Remove(coin);
            AlbumCoinService.RemoveCoinFromAlbum(AlbumId, coinId);
        }
        else
        {
            _coinsInAlbum.Add(coin);
            AlbumCoinService.AddCoinToAlbum(AlbumId, coinId);
        }

        Console.WriteLine(coinId);
    }

}