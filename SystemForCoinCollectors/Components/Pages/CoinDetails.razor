@using SystemForCoinCollectors.Data
@using SystemForCoinCollectors.Services

@inject ICoinService CoinService
@inject NavigationManager NavigationManager

@attribute [StreamRendering(true)]
@rendermode @(new InteractiveServerRenderMode(false))

@page "/coin-details/{id:int}"
<PageTitle>Coin Details</PageTitle>

@if (_coin == null)
{
    <span>Loading...</span>
}
else
{
    string removeString = "wwwroot/";
    string image = "";
    if (_coin.ImagePath.Contains(removeString))
    {
        image = _coin.ImagePath.Substring(removeString.Length - 1);
    }

    <div class="container center">
        <div class="row align-items-center">
            <h3>@_coin.Feature</h3>
        </div>

        <div class="row justify-content-center">
            <div class="col-12 col-md-4">
                <img class="coin-image" src="@image" alt="Coin Image">
            </div>
        </div>
    </div>

    <span class="bold-text">Description:</span>
    <p>@_coin.Description</p>

    <p><span class="bold-text">Issuing volume: </span>@_coin.IssuingVolume</p>
    <p><span class="bold-text">Issuing year: </span>@_coin.IssuingYear</p>
    <p><span class="bold-text">Country: </span>@_coin.Country</p>

    <AuthorizeView Roles="Admin">
        <button class="btn btn-primary purple-button" @onclick="HandleEditCoin">Edit Coin</button>
    </AuthorizeView>
    
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Coin? _coin;

    protected async override Task OnInitializedAsync()
    {
        _coin = await CoinService.GetById(Id);
    }

    private void HandleEditCoin()
    {
        NavigationManager.NavigateTo($"/edit-coin/{Id}");
    }

}
