@page "/login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using SystemForCoinCollectors.Components.Account
@using SystemForCoinCollectors.Data


<EditForm method="post" Model="UserM" OnValidSubmit="LoginUser" FormName="Login" Enhance>
    <DataAnnotationsValidator />

    <div class="wrapper">
        <h1>Login</h1>
        <div class="input-box">
            <InputText @bind-Value="UserM.UserName" placeholder="Username" class="register-input" />
            <i class="bi bi-person-fill"></i>
            <ValidationMessage For="() => UserM.UserName" class="text-danger" />
        </div>

        <div class="input-box">
            <InputText @bind-Value="UserM.Password" type="password" placeholder="Password" class="register-input" />
            <i class="bi bi-lock-fill"></i>
            <ValidationMessage For="() => UserM.Password" class="text-danger" />
        </div>
        
        <div class="remember-forgot">
            <label><input type="checkbox"> Remember me</label>
            <a href="forgot-password">Forgot password?</a>
        </div>

        <button type="submit">Login</button>
        <div class="register-link">
            <p>Don't have an account? <a href="register">Register</a></p>
        </div>
    </div>
</EditForm>

@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    public UserModel UserM { get; set; } = new();

    public class UserModel
    {
        [Required(ErrorMessage = "Username is required!")]
        public string UserName { get; set; } = "";

        [Required(ErrorMessage = "Password is required!")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser(EditContext editContext)
    {
        var result = await SignInManager.PasswordSignInAsync(UserM.UserName, UserM.Password, false, false);
        if (result.Succeeded)
        {
            Console.WriteLine("User logged in.");
            NavigationManager.NavigateTo("/my-collection");
        }
        else
        {
            Console.WriteLine("Something went wrong!");
        }
        
    }

}
