@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Azure.Identity
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Microsoft.AspNetCore.Mvc.RazorPages
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@using SystemForCoinCollectors.Components.Account
@using SystemForCoinCollectors.Data

@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Mvc.RazorPages
@using System.ComponentModel.DataAnnotations
@using System.Runtime.InteropServices.JavaScript
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@using SystemForCoinCollectors.Services

@page "/register"

<PageTitle>Register</PageTitle>

<EditForm method="post" Model="UserM" OnValidSubmit="RegisterUser" FormName="register" Enhance>
    <DataAnnotationsValidator />

    @if (_errorMessage.Length > 0)
    {
        <div class="alert alert-danger error-message">@_errorMessage</div>
    }

    <div class="wrapper">
        <h1>Register</h1>
        <div class="input-box">
            <InputText @bind-Value="UserM.UserName" placeholder="Username" class="register-input"/>
            <i class="bi bi-person-fill"></i>
            <ValidationMessage For="() => UserM.UserName" class="text-danger"/>
        </div>

        <div class="input-box">
            <InputText @bind-Value="UserM.Email" placeholder="E-mail" class="register-input" />
            <i class="bi bi-at"></i>
            <ValidationMessage For="() => UserM.Email" class="text-danger"/>
        </div>

        <div class="input-box">
            <InputText @bind-Value="UserM.Password" type="password" placeholder="Password" class="register-input" />
            <i class="bi bi-lock-fill"></i>
            <ValidationMessage For="() => UserM.Password" class="text-danger"/>
        </div>
        
        <div class="input-box">
            <InputText @bind-Value="UserM.RepeatPassword" type="password" placeholder="Repeat password" class="register-input" />
            <i class="bi bi-lock-fill"></i>
            <ValidationMessage For="() => UserM.RepeatPassword" class="text-danger"/>
        </div>
       
        <button type="submit">Register</button>
        <div class="login-link">
            <p>Already have an account? <a href="login">Login</a></p>
        </div>
    </div>
</EditForm>

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject IUserService UserService

@code {
    private string _errorMessage = "";
    private IEnumerable<IdentityError>? _identityErrors;

    [SupplyParameterFromForm]
    public UserModel UserM { get; set; } = new();

    public class UserModel
    {
        [Required(ErrorMessage = "Username is required!")]
        public string UserName { get; set; } = "";
        
        [Required(ErrorMessage = "E-mail is required!")]
        [EmailAddress(ErrorMessage = "Invalid e-mail address!")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required!")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "You have to repeat password here!")]
        [DataType(DataType.Password)]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match!")]
        public string RepeatPassword { get; set; } = "";
    }

    public async Task RegisterUser(EditContext editContext)
    {
        List<ApplicationUser> users = await UserService.GetAllUsers();
        ApplicationUser? userWithThisUsername = users.Where(u => u.UserName == UserM.UserName).Select(u => u).FirstOrDefault();
        if (userWithThisUsername != null)
        {
            _errorMessage = "User with this username already exist!";
            return;
        }

        var user = CreateUser();

        // TODO Add email confirmation.
        user.EmailConfirmed = true;

        await UserStore.SetUserNameAsync(user, UserM.UserName, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, UserM.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, UserM.Password);

        if (!result.Succeeded)
        {
            _identityErrors = result.Errors;
            return;
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        NavigationManager.NavigateTo("/auth");
    }


    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }
}
